<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2023暑假培训总结</title>
    <link href="/2023/08/23/2023%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E6%80%BB%E7%BB%93/"/>
    <url>/2023/08/23/2023%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>2023暑假培训结束了<del>，挥泪告别fr和sjb</del>，特将培训所学模板整理如下。</p><p>代码<del>以供抄袭</del>仅供参考。</p><h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><h2 id="有序离散化"><a href="#有序离散化" class="headerlink" title="有序离散化"></a>有序离散化</h2><h3 id="只关心大小关系不关心值"><a href="#只关心大小关系不关心值" class="headerlink" title="只关心大小关系不关心值"></a>只关心大小关系不关心值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">memcpy</span>(b+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>,<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)*n);<br><span class="hljs-built_in">sort</span>(b+<span class="hljs-number">1</span>;b+<span class="hljs-number">1</span>+n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    a[i] = <span class="hljs-built_in">lower_bound</span>(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n,a[i])-b;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有相同数据需要去重时"><a href="#有相同数据需要去重时" class="headerlink" title="有相同数据需要去重时"></a>有相同数据需要去重时</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">memcpy</span>(b+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>,<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)*n);<br><span class="hljs-built_in">sort</span>(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n);<br>m = <span class="hljs-built_in">unique</span>(b+<span class="hljs-number">1</span>,b+n+<span class="hljs-number">1</span>)-b<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    a[i] = <span class="hljs-built_in">lower_bound</span>(b+<span class="hljs-number">1</span>,b+m+<span class="hljs-number">1</span>,a[i])-b;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> fa[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        fa[i] = i;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x==fa[x]?x:fa[x] = <span class="hljs-built_in">find</span>(fa[x]);&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>    fa[<span class="hljs-built_in">find</span>(x)] = <span class="hljs-built_in">find</span>(y);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按秩合并"><a href="#按秩合并" class="headerlink" title="按秩合并"></a>按秩合并</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> fa[N],s[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        fa[i] = i;<br>        s[i] = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x==fa[x]?x:fa[x] = <span class="hljs-built_in">find</span>(fa[x]);&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>    x = <span class="hljs-built_in">find</span>(x),y = <span class="hljs-built_in">find</span>(y);<br>    <span class="hljs-keyword">if</span>(x==y) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(s[x]&gt;s[y]) <span class="hljs-built_in">swap</span>(x,y);<br>    fa[x] = y;<br>    s[y]+=s[x];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="带权并查集"><a href="#带权并查集" class="headerlink" title="带权并查集"></a>带权并查集</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; pii;<br><span class="hljs-type">int</span> fa[N],s[N],d[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        f[i] = i;<br>        s[i] = <span class="hljs-number">1</span>;<br>        d[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function">pii <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==fa[x]) <span class="hljs-keyword">return</span> <span class="hljs-built_in">pii</span>(fa[x],d[x]);<br>    pii res = <span class="hljs-built_in">find</span>(fa[x]);<br>    fa[x] = res.first;<br>    d[x]+=res.second;<br>    res.second = d[x];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)</span></span>&#123;<br>    pii px = <span class="hljs-built_in">find</span>(x),py = <span class="hljs-built_in">find</span>(y);<br>    z+=py.second-px.second;<br>    x = px.first,y = py.first;<br>    <span class="hljs-keyword">if</span>(x==y) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(s[x]&gt;s[y]) <span class="hljs-built_in">swap</span>(x,y),z=-z;<br>    fa[x] = y,s[y]+=s[x],d[x] = z;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> st[N][L],val[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>        st[i][<span class="hljs-number">0</span>] = val[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j+<span class="hljs-number">1</span>&lt;=L;j++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i+(<span class="hljs-number">1</span>&lt;&lt;(j+<span class="hljs-number">1</span>))<span class="hljs-number">-1</span>&lt;=n;i++)&#123;<br>            st[i][j+<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(st[i][j],st[i+(<span class="hljs-number">1</span>&lt;&lt;j)][j]);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">31</span>-__builtin_clz(r-l+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(st[l][k],st[r-(<span class="hljs-number">1</span>&lt;&lt;k)+<span class="hljs-number">1</span>][k]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="哈希函数（拉链法）"><a href="#哈希函数（拉链法）" class="headerlink" title="哈希函数（拉链法）"></a>哈希函数（拉链法）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> SIZE = <span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">999997</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">HashTable</span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>        <span class="hljs-type">int</span> next,value,key;<br>    &#125;data[SIZE];<br>    <span class="hljs-type">int</span> head[M],size;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (key%M+M)%M;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p = head[<span class="hljs-built_in">f</span>(key)];p;p = data[p].next)&#123;<br>            <span class="hljs-keyword">if</span>(data[p].key==key) <span class="hljs-keyword">return</span> data[p].value;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> key,<span class="hljs-type">int</span> value)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p = head[<span class="hljs-built_in">f</span>(key)];p;p = data[p].next)&#123;<br>            <span class="hljs-keyword">if</span>(data[p].key==key) <span class="hljs-keyword">return</span> data[p].value = value;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> key,<span class="hljs-type">int</span> value)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">get</span>(key)!=<span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        data[++size] = (Node)&#123;head[<span class="hljs-built_in">f</span>(key)],value,key&#125;;<br>        head[<span class="hljs-built_in">f</span>(key)] = size;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">FenwickTree</span>&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> delta)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(;x&lt;=n;x+=x&amp;-x)&#123;<br>            c[x]+=delta;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(;x;x-=x&amp;-x)&#123;<br>            res+=c[x];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="单点修改，区间查最大值"><a href="#单点修改，区间查最大值" class="headerlink" title="单点修改，区间查最大值"></a>单点修改，区间查最大值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SegmentTree</span>&#123;<br>    <span class="hljs-type">int</span> dat[N&lt;&lt;<span class="hljs-number">2</span>],val[N];<br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Mid ((l+r)&gt;&gt;1)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Len (r-l+1)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Root 1,1,n</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Lpos pos&lt;&lt;1;</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Rpos Lpos|1</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Lson Lpos,l,Mid</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Rson Rpos,Mid+1,r</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> This pos,l,r</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> pos)</span></span>&#123;<br>        dat[pos] = <span class="hljs-built_in">max</span>(dat[Lpos],dat[Rpos]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(l==r) dat[pos]=val[l];<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">build</span>(Lson),<span class="hljs-built_in">build</span>(Rson),<span class="hljs-built_in">upd</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> v)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> dat[pos] = v,<span class="hljs-built_in">void</span>();<br>        <span class="hljs-keyword">if</span>(p&lt;=Mid) <span class="hljs-built_in">upd</span>(Lson,p,v);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">upd</span>(Rson,p,v);<br>        <span class="hljs-built_in">upd</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R) <span class="hljs-keyword">return</span> dat[pos];<br>        <span class="hljs-keyword">if</span>(R&lt;=Mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(Lson,L,R);<br>        <span class="hljs-keyword">if</span>(L&gt;Mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(Rson,L,R);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">qry</span>(Lson,L,R),<span class="hljs-built_in">qry</span>(Rson,L,R));<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="区间修改和懒标记"><a href="#区间修改和懒标记" class="headerlink" title="区间修改和懒标记"></a>区间修改和懒标记</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SegmentTree</span>&#123;<br>    <span class="hljs-type">int</span> val[N],dat[N&lt;&lt;<span class="hljs-number">2</span>],tag[N&lt;&lt;<span class="hljs-number">2</span>];<br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Mid ((l+r)&gt;&gt;1)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Len (r-l+1)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Root 1,1,n</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Lpos pos&lt;&lt;1;</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Rpos Lpos|1</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Lson Lpos,l,Mid</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Rson Rpos,Mid+1,r</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> This pos,l,r</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stg</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> v)</span></span>&#123;<br>        tag[pos]+=v,dat[pos]+=Len*v;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">psd</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>        <span class="hljs-built_in">stg</span>(Lson,tag[pos]),<span class="hljs-built_in">stg</span>(Rson,tag[pos]),tag[pos] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> pos)</span></span>&#123;<br>        dat[pos] = dat[Lpos]+dat[Rpos];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bld</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(l==r) dat[pos] = val[l];<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">bld</span>(Lson),<span class="hljs-built_in">bld</span>(Rson),<span class="hljs-built_in">upd</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R,<span class="hljs-type">int</span> v)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">stg</span>(This,v),<span class="hljs-built_in">void</span>();<br>        &#125;<br>        <span class="hljs-built_in">psd</span>(This);<br>        <span class="hljs-keyword">if</span>(L&lt;=Mid) <span class="hljs-built_in">upd</span>(Lson,L,R,v);<br>        <span class="hljs-keyword">if</span>(R&gt;Mid) <span class="hljs-built_in">upd</span>(Rspn,L,R,v);<br>        <span class="hljs-built_in">upd</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123;<br>            <span class="hljs-keyword">return</span> dat[pos];<br>        &#125;<br>        <span class="hljs-built_in">psd</span>(This);<br>        <span class="hljs-keyword">if</span>(R&lt;=Mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(Lson,L,R);<br>        <span class="hljs-keyword">if</span>(L&gt;Mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(Rson,L,R);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(Lson,L,R)+<span class="hljs-built_in">qry</span>(Rson,L,R);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="重载-operator-，实现简便地合并信息"><a href="#重载-operator-，实现简便地合并信息" class="headerlink" title="重载 operator +，实现简便地合并信息"></a>重载 operator +，实现简便地合并信息</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>    <span class="hljs-type">int</span> sum,pre,suf,ans;<br>    <span class="hljs-built_in">node</span>()&#123;&#125;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> val)&#123;sum = pre = suf = ans = val;&#125;<br>    node <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> node&amp; r) <span class="hljs-type">const</span> &#123;<br>        node res;<br>        res.sum = sum + r.sum;<br>        res.pre = <span class="hljs-built_in">max</span>(pre,sum+r.pre);<br>        res.suf = <span class="hljs-built_in">max</span>(suf+r.sum,r.suf);<br>        res.ans = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(ans,r.ans),suf+r.pre);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="LCA（倍增法）"><a href="#LCA（倍增法）" class="headerlink" title="LCA（倍增法）"></a>LCA（倍增法）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LCA</span>&#123;<br>    <span class="hljs-type">int</span> fa[N][L+<span class="hljs-number">1</span>],dep[N];<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=L;i++)&#123;<br>            fa[u][i] = fa[fa[u][i<span class="hljs-number">-1</span>]][i<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> v:e[u])&#123;<br>            <span class="hljs-keyword">if</span>(v!=fa[u][<span class="hljs-number">0</span>])&#123;<br>                fa[v][<span class="hljs-number">0</span>] = u;<br>                dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">dfs</span>(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(dep[u]&lt;dep[v])&#123;<br>            <span class="hljs-built_in">swap</span>(u,v);<br>        &#125;<br>        <span class="hljs-type">int</span> t = dep[u] - dep[v];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L;~i;--i)&#123;<br>            <span class="hljs-keyword">if</span>(t&gt;&gt;i&amp;<span class="hljs-number">1</span>) u = fa[u][i];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(u==v) <span class="hljs-keyword">return</span> u;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L;~i;--i)&#123;<br>            <span class="hljs-keyword">if</span>(fa[u][i]^fa[v][i]) u = fa[u][i],v = fa[v][i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> fa[u][<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Heavy_Light_Decomposition</span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> fa[N],sz[N],sn[N],tp[N],dfn[N],nfd[N];<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> f)</span></span>&#123;<br>        sz[u] = <span class="hljs-number">1</span>;<br>        fa[u] = f;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> v:e[u])&#123;<br>            <span class="hljs-keyword">if</span>(v^f)&#123;<br>                <span class="hljs-built_in">dfs1</span>(v,u);<br>                sz[u]+=sz[v];<br>                <span class="hljs-keyword">if</span>(sz[sz[u]]&lt;sz[v])&#123;<br>                    sn[u] = v;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> p)</span></span>&#123;<br>        dfn[u] = ++id;<br>        nfd[id] = u;<br>        tp[u] = p;<br>        <span class="hljs-keyword">if</span>(sn[u]) <span class="hljs-built_in">dfs2</span>(sn[u],p);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> v:e[u])&#123;<br>            <span class="hljs-keyword">if</span>(v^fa[u] &amp;&amp; v^sn[u])&#123;<br>                <span class="hljs-built_in">dfs2</span>(v,v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(tp[x]!=tp[y])&#123;<br>            <span class="hljs-keyword">if</span>(dep[tp[x]]&lt;dep[tp[y]]) <span class="hljs-built_in">swap</span>(x,y);<br>            x = fa[tp[x]];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(dep[x]&gt;dep[y]) <span class="hljs-built_in">swap</span>(x,y);<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> k)</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(k&gt;=dep[x]-dep[tp[x]]+<span class="hljs-number">1</span>)&#123;<br>            k-=dep[x]-dep[tp[x]]+<span class="hljs-number">1</span>,x = fa[tp[x]];<br>        &#125;<br>        <span class="hljs-keyword">return</span> nfd[dfn[x]-k];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="在线段树上按-DFS-序存储每个节点的信息，然后每条重链都是区间修改（查询）。-重链剖分-DFS-序可以处理链上修改查询的问题。"><a href="#在线段树上按-DFS-序存储每个节点的信息，然后每条重链都是区间修改（查询）。-重链剖分-DFS-序可以处理链上修改查询的问题。" class="headerlink" title="在线段树上按 DFS 序存储每个节点的信息，然后每条重链都是区间修改（查询）。(重链剖分 + DFS 序可以处理链上修改查询的问题。)"></a>在线段树上按 DFS 序存储每个节点的信息，然后每条重链都是区间修改（查询）。(重链剖分 + DFS 序可以处理链上修改查询的问题。)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mdf</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> v)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(tp[x]^tp[y])&#123;<br>        <span class="hljs-keyword">if</span>(dep[tp[x]]&lt;dep[tp[y]]) <span class="hljs-built_in">swap</span>(x,y);<br>        <span class="hljs-built_in">mdf</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,dfn[tp[x]],dfn[x],v);<br>        x = fa[tp[x]];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dep[x]&gt;dep[y]) <span class="hljs-built_in">swap</span>(x,y);<br>    <span class="hljs-built_in">mdf</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,dfn[x],dfn[y],v);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(tp[x]^tp[y])&#123;<br>        <span class="hljs-keyword">if</span>(dep[tp[x]]&lt;dep[tp[y]]) <span class="hljs-built_in">swap</span>(x,y);<br>        r+=<span class="hljs-built_in">qry</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,dfn[tp[x]],dfn[x],v);<br>        x+=fa[tp[x]];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dep[x]&gt;dep[y]) <span class="hljs-built_in">swap</span>(x,y);<br>    r+=<span class="hljs-built_in">qry</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,dfn[x],dfn[y]);<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Eratosthenes-筛法"><a href="#Eratosthenes-筛法" class="headerlink" title="Eratosthenes 筛法"></a>Eratosthenes 筛法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> np[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sieve</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i*i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!np[i])&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i*i;j&lt;=n;j+=i)&#123;<br>                np[j] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Euler-筛法"><a href="#Euler-筛法" class="headerlink" title="Euler 筛法"></a>Euler 筛法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> np[N];<br><span class="hljs-type">int</span> pri[N],cnt = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selve</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!np[i]) pri[++cnt] = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=cnt;j++)&#123;<br>            np[i*pri[j]] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(!(i%pri[j])) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拓展-Euclid-算法"><a href="#拓展-Euclid-算法" class="headerlink" title="拓展 Euclid 算法"></a>拓展 Euclid 算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span>&amp; x,<span class="hljs-type">int</span>&amp; y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!b)&#123;x = <span class="hljs-number">1</span>,y = <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-built_in">exgcd</span>(b,a%b,y,x);<br>    y-=x*(a/b);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线性逆元"><a href="#线性逆元" class="headerlink" title="线性逆元"></a>线性逆元</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">inv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++) inv[i] = inv[mod%<span class="hljs-number">1</span>]*(mod-mod/i)%mod;<br></code></pre></td></tr></table></figure><h2 id="大步小步（BSGS）算法"><a href="#大步小步（BSGS）算法" class="headerlink" title="大步小步（BSGS）算法"></a>大步小步（BSGS）算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp">unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">BSGS</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> p)</span></span>&#123;<br>    a%=p,b%=p;<br>    <span class="hljs-keyword">if</span>(!a)&#123;<br>        <span class="hljs-keyword">if</span>(!b) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> k = <span class="hljs-built_in">sqrt</span>(p)+<span class="hljs-number">1</span>,r = <span class="hljs-number">1</span>;<br>    mp.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>        mp[r] = i,r = (ll)r*a%p;<br>    &#125;<br>    r = <span class="hljs-built_in">qpow</span>(a,p<span class="hljs-number">-1</span>-k,p);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>        <span class="hljs-keyword">if</span>(mp.<span class="hljs-built_in">count</span>(b)) <span class="hljs-keyword">return</span> i*k+mp[b];<br>        b = (ll)b*r%p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ll fac[N],inf[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) fac[i] = fac[i<span class="hljs-number">-1</span>]*i%mod;<br>    inf[n] = <span class="hljs-built_in">inv</span>(fac[n]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;~i;i--) inf[i] = inf[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%mod;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> fac[n]*inf[m]%mod*inf[n-m]%mod;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="卢卡斯定理（组合数取模）"><a href="#卢卡斯定理（组合数取模）" class="headerlink" title="卢卡斯定理（组合数取模）"></a>卢卡斯定理（组合数取模）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ll <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;m || m&lt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> fac[n]*inf[m]%p*inf[n-m]%p;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">lucas</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(n&lt;p) <span class="hljs-keyword">return</span> <span class="hljs-built_in">C</span>(n,m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Lucas</span>(n/p,m/p)*<span class="hljs-built_in">C</span>(n%p,m%p)%p;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">mat</span>&#123;<br>    ll a[N][N];<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">mat</span><span class="hljs-params">(<span class="hljs-type">int</span> op=<span class="hljs-number">0</span>)</span></span>&#123;<br>        <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> a);<br>        <span class="hljs-keyword">if</span>(op) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) a[i][i] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">const</span> ll* <span class="hljs-keyword">operator</span>[](<span class="hljs-type">int</span> x)<span class="hljs-type">const</span>&#123;<span class="hljs-keyword">return</span> a[x];&#125;<br>    ll* <span class="hljs-keyword">operator</span>[](<span class="hljs-type">int</span> x)&#123;<span class="hljs-keyword">return</span> a[x];&#125;<br>    mat <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> mat&amp; b)<span class="hljs-type">const</span>&#123;<br>        mat c;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                c[i][j] = (a[i][j]+b[i][j])%mod;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>    mat <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> mat&amp; b)<span class="hljs-type">const</span>&#123;<br>        mat c;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                c[i][j] = (a[i][j]-b[i][j]+mod)%mod;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>    mat <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> mat&amp; b)<span class="hljs-type">const</span>&#123;<br>        mat c;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;n;k++)&#123;<br>                    (c[i][j] += a[i][k]*b[k][j])%=mod;<br>                &#125;<br>                <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>&#125;;<br><span class="hljs-function">mat <span class="hljs-title">qpow</span><span class="hljs-params">(mat x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>    mat res = <span class="hljs-built_in">mat</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(;y;y&gt;&gt;=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(y&amp;<span class="hljs-number">1</span>) res = res*x;<br>        x=x*x;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高斯消元（模p意义下）"><a href="#高斯消元（模p意义下）" class="headerlink" title="高斯消元（模p意义下）"></a>高斯消元（模p意义下）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;=n;j++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i][j])&#123;<br>            pos = j;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!pos)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;No Solution\n&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(pos!=i)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n+<span class="hljs-number">1</span>;j++)&#123;<br>            <span class="hljs-built_in">swap</span>(a[i][j],a[pos][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=n+<span class="hljs-number">1</span>;j&gt;=i;j--)&#123;<br>        a[i][j] = a[i][j]*<span class="hljs-built_in">inv</span>(a[i][i])%mod;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>        <span class="hljs-keyword">if</span>(j!=i)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=n+i;k&gt;=i;k--)&#123;<br>                a[j][k] = (a[j][k]-a[i][k]*a[j][i]%mod+mod)%mod;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><h2 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">strHash</span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> base = <span class="hljs-number">19260817</span>;<br>    ll pw[N],hs[N];<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">char</span>* s)</span></span>&#123;<br>        pw[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            pw[i] = pw[i<span class="hljs-number">-1</span>]*base%MOD;<br>            hs[i] = (hs[i<span class="hljs-number">-1</span>]*base+s[i])%MOD;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">mod</span><span class="hljs-params">(ll x)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (x%MOD+MOD)%MOD;<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">Hash</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">mod</span>(hs[r]-hs[l<span class="hljs-number">-1</span>]*pw[r-l+<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Trie</span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>        <span class="hljs-type">int</span> c[<span class="hljs-number">26</span>];<br>        <span class="hljs-type">int</span> tag;<br>    &#125;a[N];<br>    <span class="hljs-type">int</span> rot=<span class="hljs-number">1</span>,tot=<span class="hljs-number">1</span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span></span>&#123;<br>        <span class="hljs-type">int</span> pos=rot,val;<br>        <span class="hljs-keyword">for</span>(;*s;s++)&#123;<br>            val=(*s)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(!a[pos].c[val])a[pos].c[val] = ++tot;<br>            pos=a[pos].c[val];<br>        &#125;<br>        a[pos].tag++;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span></span>&#123;<br>        <span class="hljs-type">int</span> pos = rot,val;<br>        <span class="hljs-keyword">for</span>(;*s;s++)&#123;<br>            val = (*s)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(!a[pos].c[val]) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            pos = a[pos].c[val];<br>        &#125;<br>        <span class="hljs-keyword">return</span> a[pos].tag;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">KMP</span>&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>        nex[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j=<span class="hljs-number">-1</span>;i&lt;=m;i++)&#123;<br>            <span class="hljs-keyword">while</span>(j!=<span class="hljs-number">-1</span> &amp;&amp; t[i]!=t[j+<span class="hljs-number">1</span>]) j = nex[j];<br>            nex[i] = ++j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">match</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">while</span>(j!=<span class="hljs-number">-1</span> &amp;&amp; s[i]!=t[j+<span class="hljs-number">1</span>]) j = nex[j];<br>            j++;<br>            <span class="hljs-keyword">if</span>(j==m)&#123;<br>                j = nex[j];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="多重背包（二进制拆分）"><a href="#多重背包（二进制拆分）" class="headerlink" title="多重背包（二进制拆分）"></a>多重背包（二进制拆分）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>&lt;&lt;l&lt;=c[i]+<span class="hljs-number">1</span>)&#123;<br>        ++l;<br>    &#125;<br>    l--;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;l;k++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> w=a[i]&lt;&lt;k,r=b[i]&lt;&lt;k,j=u;j&gt;=w;j--)&#123;<br>            f[j] = <span class="hljs-built_in">max</span>(f[j],f[j-w]+r);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> re=c[i]-(<span class="hljs-number">1</span>&lt;&lt;l)+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(re&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> w=a[i]*re,r=b[i]*re,j=u;j&gt;=w;j--)&#123;<br>            f[j] = <span class="hljs-built_in">max</span>(f[j],f[j-w]+r);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len=<span class="hljs-number">2</span>;len&lt;=n;len++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n-len+<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-type">int</span> j = i+len<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i;k&lt;j;k++)&#123;<br>            f[i][j] = <span class="hljs-built_in">min</span>(f[i][j],f[i][k]+f[k+<span class="hljs-number">1</span>][j]+s[j]-s[i<span class="hljs-number">-1</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">if</span>(du[i]==<span class="hljs-number">0</span>)&#123;<br>        q.<span class="hljs-built_in">push</span>(i);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>    u = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop</span>();<br>    topo[++cnt] = u;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v:e[u])&#123;<br>        du[v]--;<br>        <span class="hljs-keyword">if</span>(du[v]==<span class="hljs-number">0</span>) q.<span class="hljs-built_in">push</span>(v);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="欧拉图寻路过程"><a href="#欧拉图寻路过程" class="headerlink" title="欧拉图寻路过程"></a>欧拉图寻路过程</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> &amp;i=st[u];i&lt;e[u].<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-type">int</span> v = e[u][i];<br>        <span class="hljs-keyword">if</span>(vis[u][v]) <span class="hljs-keyword">continue</span>;<br>        vis[u][v] = vis[v][u] = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">dfs</span>(v);<br>    &#125;<br>    dfn[++cnt] = u;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有向图的强连通性"><a href="#有向图的强连通性" class="headerlink" title="有向图的强连通性"></a>有向图的强连通性</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tarjan</span>&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>        dfn[u] = low[u] = ++cnt;<br>        stk[++top] = u;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v:e[u])&#123;<br>            <span class="hljs-keyword">if</span>(!dfn[v]) <span class="hljs-built_in">tarjan</span>(v),low[u] = <span class="hljs-built_in">min</span>(low[u],low[v]);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!bel[v]) low[u] = <span class="hljs-built_in">min</span>(low[u],dfn[v]);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(low[u]==dfn[u])&#123;<br>            ++scc;<br>            <span class="hljs-type">int</span> v;<br>            <span class="hljs-keyword">do</span>&#123;<br>                v = stk[top--];<br>                bel[v] = scc;<br>            &#125;<span class="hljs-keyword">while</span>(v!=u);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shrink_point</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> u=<span class="hljs-number">1</span>;u&lt;=n;u++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v:e[u])&#123;<br>                <span class="hljs-keyword">if</span>(bel[u]!=bel[v])&#123;<br>                    new_e[bel[u]].<span class="hljs-built_in">push_back</span>(bel[v]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="无向图的强连通性"><a href="#无向图的强连通性" class="headerlink" title="无向图的强连通性"></a>无向图的强连通性</h2><h3 id="点"><a href="#点" class="headerlink" title="点"></a>点</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tarjan</span>&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cutpoint</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> pre = <span class="hljs-number">0</span>)</span></span>&#123;<br>        dfn[u] = low[u] = ++tot;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v:e[u])&#123;<br>            <span class="hljs-keyword">if</span>(v==pre) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(!dfn[v])&#123;<br>                <span class="hljs-built_in">cutpoint</span>(v,u);<br>                low[u] = <span class="hljs-built_in">min</span>(low[u],low[v]);<br>                <span class="hljs-keyword">if</span>(low[v]&gt;=dfn[u]) ++cut[u];<br>            &#125;<span class="hljs-keyword">else</span> low[u] = <span class="hljs-built_in">min</span>(low[u],dfn[v]);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!pre) --cut[u];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PBC</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> pre = <span class="hljs-number">0</span>)</span></span>&#123;<br>        dfn[u] = low[u] = ++tot;<br>        stk[++top] = u;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v:e[u])&#123;<br>            <span class="hljs-keyword">if</span>(v==pre) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(!dfn[v])&#123;<br>                <span class="hljs-built_in">PBC</span>(v,u);<br>                low[u] = <span class="hljs-built_in">min</span>(low[u],low[v]);<br>                <span class="hljs-keyword">if</span>(low[v]&gt;=dfn[u])&#123;<br>                    ++cut[u],bcc++;<br>                    com[bcc].<span class="hljs-built_in">push_back</span>(u);<br>                    <span class="hljs-type">int</span> w;<br>                    <span class="hljs-keyword">do</span>&#123;<br>                        w = stk[top--];<br>                        com[bcc].<span class="hljs-built_in">push_back</span>(w);<br>                    &#125;<span class="hljs-keyword">while</span>(v!=w);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span> low[u] = <span class="hljs-built_in">min</span>(low[u],dfn[v]);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!pre) --cut[u];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="边"><a href="#边" class="headerlink" title="边"></a>边</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tarjan</span>&#123;<br>    <span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; pii;<br>    vector&lt;pii&gt; e[N];<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span>&#123;<br>        ++cnt;<br>        e[u].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(v,cnt));<br>        e[v].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(u,cnt));<br>    &#125;<br>    <span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>,dfn[N],low[N];<br>    <span class="hljs-type">int</span> bcc = <span class="hljs-number">0</span>,bel[N];<br>    <span class="hljs-type">int</span> top = <span class="hljs-number">0</span>,stk[N];<br>    <span class="hljs-type">bool</span> bright[N];<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EBC</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> pre = <span class="hljs-number">0</span>)</span></span>&#123;<br>        dfn[u] = low[u] = ++tot;<br>        stk[++top] = u;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> ee:e[u])&#123;<br>            <span class="hljs-type">int</span> v = ee.first;<br>            <span class="hljs-keyword">if</span>(ee.second == pre)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!dfn[v])&#123;<br>                <span class="hljs-built_in">EBC</span>(v,ee.second);<br>                low[u] = <span class="hljs-built_in">min</span>(low[u],low[v]);<br>                <span class="hljs-keyword">if</span>(dfn[u]&gt;low[v]) bright[ee.second] = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                low[u] = <span class="hljs-built_in">min</span>(low[u],dfn[v]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(dfn[u]==low[u])&#123;<br>            ++bcc,bright[pre] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-type">int</span> v;<br>            <span class="hljs-keyword">do</span> v = stk[top--],bel[v] = bcc;<br>            <span class="hljs-keyword">while</span>(v!=u);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="prim"><a href="#prim" class="headerlink" title="prim"></a>prim</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[j] &amp;&amp; (k==<span class="hljs-number">0</span> || dis[j]&lt;dis[k]))&#123;<br>            k = j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>        dis[j] = <span class="hljs-built_in">min</span>(dis[j],e[k][j]);<br>    &#125;<br>    vis[k] = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            d[i][j] = <span class="hljs-built_in">min</span>(d[i][j],d[i][k]+d[k][j]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="传递闭包"><a href="#传递闭包" class="headerlink" title="传递闭包"></a>传递闭包</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            d[i][j] |= d[i][k]&amp;d[k][j];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Dijkstra</span>&#123;<br>    <span class="hljs-type">int</span> dis[N];<br>    <span class="hljs-type">bool</span> vis[N];<br>    <span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; pii;<br>    vector&lt;pii&gt; e[N];<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dq</span>&#123;<br>        <span class="hljs-type">int</span> dist,id;<br>        <span class="hljs-built_in">dq</span>(<span class="hljs-type">int</span> dist,<span class="hljs-type">int</span> id):<span class="hljs-built_in">dist</span>(dist),<span class="hljs-built_in">id</span>(id)&#123;&#125;;<br>    &#125;;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">cmp</span>&#123;<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(dq a,dq b)</span></span>&#123;<br>            <span class="hljs-keyword">return</span> a.dist&gt;b.dist;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">core</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span>&#123;<br>        <span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dis);<br>        priority_queue&lt;dq,vector&lt;dq&gt;,cmp&gt; q;<br>        dis[s] = <span class="hljs-number">0</span>;<br>        q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">dq</span>(<span class="hljs-number">0</span>,s));<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-type">int</span> p = q.<span class="hljs-built_in">top</span>().id;<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(vis[p]) <span class="hljs-keyword">continue</span>;<br>            vis[p] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> ee:e[p])&#123;<br>                <span class="hljs-type">int</span> v = ee.first;<br>                dis[v] = <span class="hljs-built_in">min</span>(dis[v],dis[p]+ee.second);<br>                <span class="hljs-keyword">if</span>(!vis[v]) q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">dq</span>(dis[v],v));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span>&#123;<br>    q.<span class="hljs-built_in">push</span>(s);<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        ex[u] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> ee:e[u])&#123;<br>            <span class="hljs-type">int</span> v = ee.first;<br>            <span class="hljs-keyword">if</span>(dis[v]&gt;dis[u]+ee.second)&#123;<br>                dis[v]=dis[u]+ee.second;<br>                <span class="hljs-keyword">if</span>(!ex[v])&#123;<br>                    ex[v] = <span class="hljs-number">1</span>;<br>                    q.<span class="hljs-built_in">push</span>(v);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判负环"><a href="#判负环" class="headerlink" title="判负环"></a>判负环</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">spfa_check</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>        u = q.<span class="hljs-built_in">front</span>();<br>        vis[u] = <span class="hljs-number">0</span>;<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> ee:e[u])&#123;<br>            <span class="hljs-type">int</span> v = ee.first;<br>            <span class="hljs-type">int</span> w = ee.second;<br>            <span class="hljs-keyword">if</span>(dis[v]&gt;dis[u]+w)&#123;<br>                dis[v] = dis[u]+w;<br>                cnt[v] = cnt[u]+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(cnt[v]&gt;=n)&#123;<br>                    cout&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(!vis[v]) vis[v] = <span class="hljs-number">1</span>,q.<span class="hljs-built_in">push</span>(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，暑假大部分模板已经整理结束，如有疏漏，请多指教。</p><p><del>Let’s AK NOI 2024!</del></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>模板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三篇题解——产生数</title>
    <link href="/2023/02/21/%E7%AC%AC%E4%B8%89%E7%AF%87%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E4%BA%A7%E7%94%9F%E6%95%B0/"/>
    <url>/2023/02/21/%E7%AC%AC%E4%B8%89%E7%AF%87%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E4%BA%A7%E7%94%9F%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><del>对于刚学图论的蒟蒻来讲，</del>这道题确实比较复杂。</p><h1 id="NOIP2002-普及组-产生数"><a href="#NOIP2002-普及组-产生数" class="headerlink" title="[NOIP2002 普及组] 产生数"></a>[NOIP2002 普及组] 产生数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个整数 $n$ 和 $k$ 个变换规则。</p><p>规则：</p><ul><li>一位数可变换成另一个一位数。</li><li>规则的右部不能为零。</li></ul><p>例如：$n=234,k=2$。有以下两个规则：</p><ul><li>$2\longrightarrow 5$。  </li><li>$3\longrightarrow 6$。 </li></ul><p>上面的整数 $234$ 经过变换后可能产生出的整数为（包括原数）:</p><ul><li>$234$。</li><li>$534$。</li><li>$264$。</li><li>$564$。</li></ul><p>共 $4$ 种不同的产生数。</p><p>现在给出一个整数 $n$ 和 $k$ 个规则。求出经过任意次的变换（$0$次或多次），能产生出多少个不同整数。</p><p>仅要求输出个数。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数 $n,k$，含义如题面所示。</p><p>接下来 $k$ 行，每行两个整数 $x_i,y_i$，表示每条规则。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>共一行，输出能生成的数字个数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">234 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $100\%$ 数据，满足 $n \lt 10^{30}$，$k \le 15$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2002 普及组第三题</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>这道题<del>我一开始以为是2的幂次方的关系</del>，后来发现，优化（也许是）的<strong>重中之重</strong>是——找到指定字符串中0~9每个数字都能有几种变法，再根据伟大的数学，可得知：</p><p>cnt就是这些变法次数的乘积！！！</p><p>于是，我们的思路就有了……</p><p>输入的时候，先把已知关系存储。</p><p><img src="1.png" alt="输入"></p><p>紧接着用弗洛伊德算法求出0~9每个数字能怎么变。</p><p><img src="2.png" alt="判断"></p><p>接下来，循环一边，找出每个数字的变法。</p><p><img src="3.png" alt="赋值"></p><p>如果是不习惯string的<del>信竞dalao</del>蒟蒻们，可以用数组记录值（不用开太大）。</p><p>然后就开始本题的精华——高精度乘法。</p><p>当然，高精乘法是我们每个人都不愿面对的（so这里我是用压位的方法实现的），感兴趣的同志们可以学习一下数组压位，很简单的……</p><p>最后，前序清零，倒序输出，<strong>假如不足你的进位制，别忘了补0哦</strong>，这个坑人无数啊（悲）。</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string n;<br><span class="hljs-type">int</span> k;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">t</span>&#123;<br><span class="hljs-type">int</span> u;<br><span class="hljs-type">int</span> v;<br>&#125;a[<span class="hljs-number">20</span>];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> cnt[<span class="hljs-number">25</span>];<br><span class="hljs-type">int</span> mp[<span class="hljs-number">25</span>];<br><span class="hljs-type">bool</span> b[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> az[<span class="hljs-number">25</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)&#123;<br>cin&gt;&gt;a[i].u&gt;&gt;a[i].v;<br>b[a[i].u][a[i].v] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> kk=<span class="hljs-number">0</span>;kk&lt;<span class="hljs-number">10</span>;kk++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(b[i][kk]==<span class="hljs-number">1</span> &amp;&amp; b[kk][j]==<span class="hljs-number">1</span> &amp;&amp; i!=j)&#123;<br>b[i][j] = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(b[i][j]==<span class="hljs-number">1</span>)&#123;<br>mp[i]++;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>mp[i]++;<br>&#125;<br><span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;<br>cnt[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> ll = n.<span class="hljs-built_in">length</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;ll;i++)&#123;<br>az[i] = mp[(n[i]-<span class="hljs-string">&#x27;0&#x27;</span>)];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;ll;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=r;j++)&#123;<br>cnt[j]*=az[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=r;j++)&#123;<br><span class="hljs-keyword">if</span>(cnt[j]&gt;=<span class="hljs-number">10000000</span>)&#123;<br>cnt[j+<span class="hljs-number">1</span>]+=cnt[j]/<span class="hljs-number">10000000</span>;<br>cnt[j] = cnt[j]%<span class="hljs-number">10000000</span>;<br>r++;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span>(cnt[r]==<span class="hljs-number">0</span>)&#123;<br>r--;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=r;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-keyword">if</span>(i!=r)&#123;<br><span class="hljs-keyword">if</span>(cnt[i]&lt;<span class="hljs-number">1000000</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt[i]&lt;<span class="hljs-number">100000</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt[i]&lt;<span class="hljs-number">10000</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt[i]&lt;<span class="hljs-number">1000</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt[i]&lt;<span class="hljs-number">100</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt[i]&lt;<span class="hljs-number">10</span>)&#123;<br>cout&lt;&lt;<span class="hljs-number">0</span>;<br>&#125;<br>cout&lt;&lt;<span class="hljs-number">0</span>;<br>&#125;<br>cout&lt;&lt;<span class="hljs-number">0</span>;<br>&#125;<br>cout&lt;&lt;<span class="hljs-number">0</span>;<br>&#125;<br>cout&lt;&lt;<span class="hljs-number">0</span>;<br>&#125;<br>cout&lt;&lt;<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>cout&lt;&lt;cnt[i];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>@全国信竞生 祝大家<strong><em><del>钱秃似紧</del>心想事成</em></strong>！！！</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>图论</category>
      
      <category>高精度</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二篇题解——运输</title>
    <link href="/2023/02/16/%E7%AC%AC%E4%BA%8C%E7%AF%87%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E8%BF%90%E8%BE%93/"/>
    <url>/2023/02/16/%E7%AC%AC%E4%BA%8C%E7%AF%87%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E8%BF%90%E8%BE%93/</url>
    
    <content type="html"><![CDATA[<p><del>这真的是优先队列的水题</del></p><h1 id="运输"><a href="#运输" class="headerlink" title="运输"></a>运输</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>现在已知 $N$ 件商品，和搬运它们其中每一件的费用。现在搬家公司老板 Mr.sb 决定让我们每次任意选取 $2$ 件商品。然后这 $2$ 件商品只算一件商品的费用。但是这个商品的搬运费用是将选出的 $2$ 个商品的费用之和除以 $k$ 的运算结果。如此反复。直到只收一件商品的钱。这个就是商店要付的费用。掌柜的想尽可能的少付钱，以便将更多的钱捐给希望工程。所以请你帮他计算一下最少只用付多少钱。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数 $n,k$。</p><p>第二行 $n$ 个整数 $w_1,w_2,\ldots,w_n$，表示每一件物品搬运费。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行一个整数表示最少付多少钱。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>$n,k,w_i$ 均为非负数。</p><p>$n,k\le 10^4$。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>其实，根据样例，<del>试一试便可知道</del>这道题的<strong>精髓</strong>：每次将当前最大的两个数合并，再放入其中，直至只剩一个元素——其实就是堆的思想，那么这道题便就可以用优先队列来解决了。</p><p><del>that’s why这是道水题</del></p><p>输入：减少循环的次数，可以边输入边将其加入我们的大根堆。</p><p><img src="1.png" alt="输入"></p><p>处理：每次去除队首的两个元素，将他们相加再$\div k $，将得到的结果重新加入队列，再重复执行。</p><p>至于次数，emm…，$while(q.size&gt;1)$即可。</p><p>so，这道题真的是巩固优先队列的<del>水题</del>。</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k,v[<span class="hljs-number">10005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,less&lt;<span class="hljs-type">int</span>&gt; &gt; q;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;v[i]);<br>q.<span class="hljs-built_in">push</span>(v[i]);<br>&#125;<br><span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-type">int</span> x = q.<span class="hljs-built_in">top</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">int</span> y = q.<span class="hljs-built_in">top</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">int</span> z = (x+y)/k;<br>q.<span class="hljs-built_in">push</span>(z);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,q.<span class="hljs-built_in">top</span>());<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>@全国信竞生 大家<strong><em>加油加油再加油</em></strong>！！！</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>优先队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇题解——青铜莲花池</title>
    <link href="/2023/02/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E9%9D%92%E9%93%9C%E8%8E%B2%E8%8A%B1%E6%B1%A0/"/>
    <url>/2023/02/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E9%9D%92%E9%93%9C%E8%8E%B2%E8%8A%B1%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<p><del>应该是</del>一道经典的bfs广搜题</p><h1 id="青铜莲花池"><a href="#青铜莲花池" class="headerlink" title="青铜莲花池"></a>青铜莲花池</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>$Farmer John$ 建造了一个美丽的池塘，用于让他的牛们审美和锻炼。这个长方形的池子被分割成了$ M $行和$ N $列 $( 1 \leq M \leq 30 ; 1 \le N \le 30 )$ 正方形格子的 。某些格子上有惊人的坚固的莲花，还有一些岩石，其余的只是美丽，纯净，湛蓝的水。</p><p>贝茜正在练习芭蕾舞，她从一个莲花跳跃到另一个莲花，当前位于一个莲花。她希望在莲花上一个一个的跳，目标是另一个给定莲花。她能跳既不入水，也不到一个岩石上。</p><p>令门外汉惊讶的是，贝茜的每次的跳跃像国际象棋中的骑士一样：横向移动$M1 (1 \leq M1 \leq 30 )$，然后纵向移动$M2 (1 \leq M2 \leq 30 ; M1 \neq M2 )$ ，或纵向移动$M1$，然后横向移动$M2$。贝茜有时可能会有多达8个选择的跳跃。</p><p>给定池塘的布局和贝茜的跳跃格式，请确定贝茜从从她的出发位置，到最终目的地，最小的跳跃次数，贝茜在给出测试数据一定可以跳到目的地。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第 1 行：四个用空格隔开的整数: $M$，$N$，$M1$，$M2$。<br>第 2..$M + 1$ 行：第 $i + 1$ 行 有 $N$ 个整数，表示该位置的状态：$0$ 为水； $1$ 为莲花； $2$ 为岩石； $3$ 为贝茜开始的位置； $4$ 为贝茜要去的目标位置。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>第 1 行：一个整数，从起始点到要去的位置，贝茜最小的跳跃次数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p><del>不难看出</del>这道题应该采用广度优先搜索（bfs），那就以bfs模板（也不完全是）为框架，将这道题不同之处用你<del>聪明</del>的大脑填入“框架”中。（<strong><em>By the way</em></strong>，不习惯于STL中的queue的，可以自己用数组和头尾指针来代替）</p><p>首先，根据题目，贝同学会有8个方向的跳跃，分别由$M1$和$M2$的不同位置及方向决定的。那我们就用最stupid的做法：</p><p><img src="1.png" alt="方向"></p><p>当然，防止RE的悲剧发生，我们要提前将这些坐标判断一下。</p><p><img src="2.png" alt="除杂"></p><p>先讲一下原理：因为这8个方向是一个整体，so我们可以在循环外q.pop()，来保证搜索的点一“一”对应。同时，这8个点层数就+1。为了方便，我们不妨在结构体中直接定义step来简化我们的程序。<del>你也不知道贝同学这8个点是不是都不会掉水里or撞石头上</del></p><p>防止可怜的贝同学迷路（程序死循环），我们需要慷慨地将她走过的<del>坑</del>路做一个记号。鉴于输入时是int格式，所以如果$a_{i,j}$==0，那我们先将其赋值为1，然后加入队列温暖的大家庭。</p><p>当然，在我们的bfs函数的开头，别忘设置队列的初始值哦。</p><p><img src="3.png" alt="输入"></p><p>这道题想明白了，你离bfs最<del>只因</del>基本思路的打通就不远了</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,m1,m2;<br><span class="hljs-type">int</span> a[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>];<br><span class="hljs-type">int</span> x,y;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">point</span>&#123;<br><span class="hljs-type">int</span> xx,yy,step;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>point f1;<br>f1.step=<span class="hljs-number">0</span>;<br>f1.xx = x;<br>f1.yy = y;<br>queue&lt;point&gt; q;<br>q.<span class="hljs-built_in">push</span>(f1);<br><span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">empty</span>()!=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">7</span>;i++)&#123;<br><span class="hljs-type">int</span> ix,iy;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx+m1;<br>iy = q.<span class="hljs-built_in">front</span>().yy+m2;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx+m2;<br>iy = q.<span class="hljs-built_in">front</span>().yy+m1;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">2</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx+m2;<br>iy = q.<span class="hljs-built_in">front</span>().yy-m1;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">3</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx+m1;<br>iy = q.<span class="hljs-built_in">front</span>().yy-m2;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">4</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx-m1;<br>iy = q.<span class="hljs-built_in">front</span>().yy-m2;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">5</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx-m1;<br>iy = q.<span class="hljs-built_in">front</span>().yy+m2;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">6</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx-m2;<br>iy = q.<span class="hljs-built_in">front</span>().yy+m1;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">7</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx-m2;<br>iy = q.<span class="hljs-built_in">front</span>().yy-m1;<br>&#125;<br><span class="hljs-keyword">if</span>(ix&lt;<span class="hljs-number">1</span> || ix&gt;n || iy&lt;<span class="hljs-number">1</span> || iy&gt;m)&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(a[ix][iy]==<span class="hljs-number">4</span>)&#123;<br><span class="hljs-type">int</span> st = q.<span class="hljs-built_in">front</span>().step+<span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,st);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(a[ix][iy]==<span class="hljs-number">1</span>)&#123;<br>a[ix][iy]=<span class="hljs-number">0</span>;<br>point f;<br>f.step = q.<span class="hljs-built_in">front</span>().step+<span class="hljs-number">1</span>;<br>f.xx = ix;<br>f.yy = iy;<br>q.<span class="hljs-built_in">push</span>(f);<br>&#125;<br>&#125;<br>q.<span class="hljs-built_in">pop</span>();<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;m1,&amp;m2);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i][j]);<br><span class="hljs-keyword">if</span>(a[i][j] == <span class="hljs-number">3</span>)&#123;<br>x = i;<br>y = j;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">bfs</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>本篇题解为王某的处女作，希望今后能与全国（世界）信竞生<strong><em>一起努力，一起拼搏，一起收获</em></strong>。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>bfs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2023/02/12/test/"/>
    <url>/2023/02/12/test/</url>
    
    <content type="html"><![CDATA[<p>first day in hexo</p><img src="/2023/02/12/test/test.png" class="">]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/12/hello-world/"/>
    <url>/2023/02/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
