<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2023暑假培训总结</title>
    <link href="/2023/08/23/2023%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E6%80%BB%E7%BB%93/"/>
    <url>/2023/08/23/2023%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>2023暑假培训结束了<del>，挥泪告别fr和sjb</del>，特将培训所学模板整理如下。</p><p>代码<del>以供抄袭</del>仅供参考。</p><h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><h2 id="有序离散化"><a href="#有序离散化" class="headerlink" title="有序离散化"></a>有序离散化</h2><h3 id="只关心大小关系不关心值"><a href="#只关心大小关系不关心值" class="headerlink" title="只关心大小关系不关心值"></a>只关心大小关系不关心值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">memcpy</span>(b+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>,<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)*n);<br><span class="hljs-built_in">sort</span>(b+<span class="hljs-number">1</span>;b+<span class="hljs-number">1</span>+n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    a[i] = <span class="hljs-built_in">lower_bound</span>(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n,a[i])-b;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有相同数据需要去重时"><a href="#有相同数据需要去重时" class="headerlink" title="有相同数据需要去重时"></a>有相同数据需要去重时</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">memcpy</span>(b+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>,<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)*n);<br><span class="hljs-built_in">sort</span>(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n);<br>m = <span class="hljs-built_in">unique</span>(b+<span class="hljs-number">1</span>,b+n+<span class="hljs-number">1</span>)-b<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    a[i] = <span class="hljs-built_in">lower_bound</span>(b+<span class="hljs-number">1</span>,b+m+<span class="hljs-number">1</span>,a[i])-b;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> fa[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        fa[i] = i;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x==fa[x]?x:fa[x] = <span class="hljs-built_in">find</span>(fa[x]);&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>    fa[<span class="hljs-built_in">find</span>(x)] = <span class="hljs-built_in">find</span>(y);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按秩合并"><a href="#按秩合并" class="headerlink" title="按秩合并"></a>按秩合并</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> fa[N],s[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        fa[i] = i;<br>        s[i] = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x==fa[x]?x:fa[x] = <span class="hljs-built_in">find</span>(fa[x]);&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>    x = <span class="hljs-built_in">find</span>(x),y = <span class="hljs-built_in">find</span>(y);<br>    <span class="hljs-keyword">if</span>(x==y) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(s[x]&gt;s[y]) <span class="hljs-built_in">swap</span>(x,y);<br>    fa[x] = y;<br>    s[y]+=s[x];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="带权并查集"><a href="#带权并查集" class="headerlink" title="带权并查集"></a>带权并查集</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; pii;<br><span class="hljs-type">int</span> fa[N],s[N],d[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        f[i] = i;<br>        s[i] = <span class="hljs-number">1</span>;<br>        d[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function">pii <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==fa[x]) <span class="hljs-keyword">return</span> <span class="hljs-built_in">pii</span>(fa[x],d[x]);<br>    pii res = <span class="hljs-built_in">find</span>(fa[x]);<br>    fa[x] = res.first;<br>    d[x]+=res.second;<br>    res.second = d[x];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)</span></span>&#123;<br>    pii px = <span class="hljs-built_in">find</span>(x),py = <span class="hljs-built_in">find</span>(y);<br>    z+=py.second-px.second;<br>    x = px.first,y = py.first;<br>    <span class="hljs-keyword">if</span>(x==y) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(s[x]&gt;s[y]) <span class="hljs-built_in">swap</span>(x,y),z=-z;<br>    fa[x] = y,s[y]+=s[x],d[x] = z;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> st[N][L],val[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>        st[i][<span class="hljs-number">0</span>] = val[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j+<span class="hljs-number">1</span>&lt;=L;j++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i+(<span class="hljs-number">1</span>&lt;&lt;(j+<span class="hljs-number">1</span>))<span class="hljs-number">-1</span>&lt;=n;i++)&#123;<br>            st[i][j+<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(st[i][j],st[i+(<span class="hljs-number">1</span>&lt;&lt;j)][j]);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">31</span>-__builtin_clz(r-l+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(st[l][k],st[r-(<span class="hljs-number">1</span>&lt;&lt;k)+<span class="hljs-number">1</span>][k]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="哈希函数（拉链法）"><a href="#哈希函数（拉链法）" class="headerlink" title="哈希函数（拉链法）"></a>哈希函数（拉链法）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> SIZE = <span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">999997</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">HashTable</span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>        <span class="hljs-type">int</span> next,value,key;<br>    &#125;data[SIZE];<br>    <span class="hljs-type">int</span> head[M],size;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (key%M+M)%M;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p = head[<span class="hljs-built_in">f</span>(key)];p;p = data[p].next)&#123;<br>            <span class="hljs-keyword">if</span>(data[p].key==key) <span class="hljs-keyword">return</span> data[p].value;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> key,<span class="hljs-type">int</span> value)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p = head[<span class="hljs-built_in">f</span>(key)];p;p = data[p].next)&#123;<br>            <span class="hljs-keyword">if</span>(data[p].key==key) <span class="hljs-keyword">return</span> data[p].value = value;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> key,<span class="hljs-type">int</span> value)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">get</span>(key)!=<span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        data[++size] = (Node)&#123;head[<span class="hljs-built_in">f</span>(key)],value,key&#125;;<br>        head[<span class="hljs-built_in">f</span>(key)] = size;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">FenwickTree</span>&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> delta)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(;x&lt;=n;x+=x&amp;-x)&#123;<br>            c[x]+=delta;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(;x;x-=x&amp;-x)&#123;<br>            res+=c[x];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="单点修改，区间查最大值"><a href="#单点修改，区间查最大值" class="headerlink" title="单点修改，区间查最大值"></a>单点修改，区间查最大值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SegmentTree</span>&#123;<br>    <span class="hljs-type">int</span> dat[N&lt;&lt;<span class="hljs-number">2</span>],val[N];<br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Mid ((l+r)&gt;&gt;1)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Len (r-l+1)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Root 1,1,n</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Lpos pos&lt;&lt;1;</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Rpos Lpos|1</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Lson Lpos,l,Mid</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Rson Rpos,Mid+1,r</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> This pos,l,r</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> pos)</span></span>&#123;<br>        dat[pos] = <span class="hljs-built_in">max</span>(dat[Lpos],dat[Rpos]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(l==r) dat[pos]=val[l];<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">build</span>(Lson),<span class="hljs-built_in">build</span>(Rson),<span class="hljs-built_in">upd</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> v)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> dat[pos] = v,<span class="hljs-built_in">void</span>();<br>        <span class="hljs-keyword">if</span>(p&lt;=Mid) <span class="hljs-built_in">upd</span>(Lson,p,v);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">upd</span>(Rson,p,v);<br>        <span class="hljs-built_in">upd</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R) <span class="hljs-keyword">return</span> dat[pos];<br>        <span class="hljs-keyword">if</span>(R&lt;=Mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(Lson,L,R);<br>        <span class="hljs-keyword">if</span>(L&gt;Mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(Rson,L,R);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">qry</span>(Lson,L,R),<span class="hljs-built_in">qry</span>(Rson,L,R));<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="区间修改和懒标记"><a href="#区间修改和懒标记" class="headerlink" title="区间修改和懒标记"></a>区间修改和懒标记</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SegmentTree</span>&#123;<br>    <span class="hljs-type">int</span> val[N],dat[N&lt;&lt;<span class="hljs-number">2</span>],tag[N&lt;&lt;<span class="hljs-number">2</span>];<br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Mid ((l+r)&gt;&gt;1)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Len (r-l+1)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Root 1,1,n</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Lpos pos&lt;&lt;1;</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Rpos Lpos|1</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Lson Lpos,l,Mid</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> Rson Rpos,Mid+1,r</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> This pos,l,r</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stg</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> v)</span></span>&#123;<br>        tag[pos]+=v,dat[pos]+=Len*v;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">psd</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>        <span class="hljs-built_in">stg</span>(Lson,tag[pos]),<span class="hljs-built_in">stg</span>(Rson,tag[pos]),tag[pos] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> pos)</span></span>&#123;<br>        dat[pos] = dat[Lpos]+dat[Rpos];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bld</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(l==r) dat[pos] = val[l];<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">bld</span>(Lson),<span class="hljs-built_in">bld</span>(Rson),<span class="hljs-built_in">upd</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R,<span class="hljs-type">int</span> v)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">stg</span>(This,v),<span class="hljs-built_in">void</span>();<br>        &#125;<br>        <span class="hljs-built_in">psd</span>(This);<br>        <span class="hljs-keyword">if</span>(L&lt;=Mid) <span class="hljs-built_in">upd</span>(Lson,L,R,v);<br>        <span class="hljs-keyword">if</span>(R&gt;Mid) <span class="hljs-built_in">upd</span>(Rspn,L,R,v);<br>        <span class="hljs-built_in">upd</span>(pos);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123;<br>            <span class="hljs-keyword">return</span> dat[pos];<br>        &#125;<br>        <span class="hljs-built_in">psd</span>(This);<br>        <span class="hljs-keyword">if</span>(R&lt;=Mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(Lson,L,R);<br>        <span class="hljs-keyword">if</span>(L&gt;Mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(Rson,L,R);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(Lson,L,R)+<span class="hljs-built_in">qry</span>(Rson,L,R);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>模板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三篇题解——产生数</title>
    <link href="/2023/02/21/%E7%AC%AC%E4%B8%89%E7%AF%87%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E4%BA%A7%E7%94%9F%E6%95%B0/"/>
    <url>/2023/02/21/%E7%AC%AC%E4%B8%89%E7%AF%87%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E4%BA%A7%E7%94%9F%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><del>对于刚学图论的蒟蒻来讲，</del>这道题确实比较复杂。</p><h1 id="NOIP2002-普及组-产生数"><a href="#NOIP2002-普及组-产生数" class="headerlink" title="[NOIP2002 普及组] 产生数"></a>[NOIP2002 普及组] 产生数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个整数 $n$ 和 $k$ 个变换规则。</p><p>规则：</p><ul><li>一位数可变换成另一个一位数。</li><li>规则的右部不能为零。</li></ul><p>例如：$n=234,k=2$。有以下两个规则：</p><ul><li>$2\longrightarrow 5$。  </li><li>$3\longrightarrow 6$。 </li></ul><p>上面的整数 $234$ 经过变换后可能产生出的整数为（包括原数）:</p><ul><li>$234$。</li><li>$534$。</li><li>$264$。</li><li>$564$。</li></ul><p>共 $4$ 种不同的产生数。</p><p>现在给出一个整数 $n$ 和 $k$ 个规则。求出经过任意次的变换（$0$次或多次），能产生出多少个不同整数。</p><p>仅要求输出个数。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数 $n,k$，含义如题面所示。</p><p>接下来 $k$ 行，每行两个整数 $x_i,y_i$，表示每条规则。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>共一行，输出能生成的数字个数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">234 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $100\%$ 数据，满足 $n \lt 10^{30}$，$k \le 15$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2002 普及组第三题</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>这道题<del>我一开始以为是2的幂次方的关系</del>，后来发现，优化（也许是）的<strong>重中之重</strong>是——找到指定字符串中0~9每个数字都能有几种变法，再根据伟大的数学，可得知：</p><p>cnt就是这些变法次数的乘积！！！</p><p>于是，我们的思路就有了……</p><p>输入的时候，先把已知关系存储。</p><p><img src="1.png" alt="输入"></p><p>紧接着用弗洛伊德算法求出0~9每个数字能怎么变。</p><p><img src="2.png" alt="判断"></p><p>接下来，循环一边，找出每个数字的变法。</p><p><img src="3.png" alt="赋值"></p><p>如果是不习惯string的<del>信竞dalao</del>蒟蒻们，可以用数组记录值（不用开太大）。</p><p>然后就开始本题的精华——高精度乘法。</p><p>当然，高精乘法是我们每个人都不愿面对的（so这里我是用压位的方法实现的），感兴趣的同志们可以学习一下数组压位，很简单的……</p><p>最后，前序清零，倒序输出，<strong>假如不足你的进位制，别忘了补0哦</strong>，这个坑人无数啊（悲）。</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string n;<br><span class="hljs-type">int</span> k;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">t</span>&#123;<br><span class="hljs-type">int</span> u;<br><span class="hljs-type">int</span> v;<br>&#125;a[<span class="hljs-number">20</span>];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> cnt[<span class="hljs-number">25</span>];<br><span class="hljs-type">int</span> mp[<span class="hljs-number">25</span>];<br><span class="hljs-type">bool</span> b[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> az[<span class="hljs-number">25</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)&#123;<br>cin&gt;&gt;a[i].u&gt;&gt;a[i].v;<br>b[a[i].u][a[i].v] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> kk=<span class="hljs-number">0</span>;kk&lt;<span class="hljs-number">10</span>;kk++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(b[i][kk]==<span class="hljs-number">1</span> &amp;&amp; b[kk][j]==<span class="hljs-number">1</span> &amp;&amp; i!=j)&#123;<br>b[i][j] = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(b[i][j]==<span class="hljs-number">1</span>)&#123;<br>mp[i]++;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>mp[i]++;<br>&#125;<br><span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;<br>cnt[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> ll = n.<span class="hljs-built_in">length</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;ll;i++)&#123;<br>az[i] = mp[(n[i]-<span class="hljs-string">&#x27;0&#x27;</span>)];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;ll;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=r;j++)&#123;<br>cnt[j]*=az[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=r;j++)&#123;<br><span class="hljs-keyword">if</span>(cnt[j]&gt;=<span class="hljs-number">10000000</span>)&#123;<br>cnt[j+<span class="hljs-number">1</span>]+=cnt[j]/<span class="hljs-number">10000000</span>;<br>cnt[j] = cnt[j]%<span class="hljs-number">10000000</span>;<br>r++;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span>(cnt[r]==<span class="hljs-number">0</span>)&#123;<br>r--;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=r;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-keyword">if</span>(i!=r)&#123;<br><span class="hljs-keyword">if</span>(cnt[i]&lt;<span class="hljs-number">1000000</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt[i]&lt;<span class="hljs-number">100000</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt[i]&lt;<span class="hljs-number">10000</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt[i]&lt;<span class="hljs-number">1000</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt[i]&lt;<span class="hljs-number">100</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt[i]&lt;<span class="hljs-number">10</span>)&#123;<br>cout&lt;&lt;<span class="hljs-number">0</span>;<br>&#125;<br>cout&lt;&lt;<span class="hljs-number">0</span>;<br>&#125;<br>cout&lt;&lt;<span class="hljs-number">0</span>;<br>&#125;<br>cout&lt;&lt;<span class="hljs-number">0</span>;<br>&#125;<br>cout&lt;&lt;<span class="hljs-number">0</span>;<br>&#125;<br>cout&lt;&lt;<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>cout&lt;&lt;cnt[i];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>@全国信竞生 祝大家<strong><em><del>钱秃似紧</del>心想事成</em></strong>！！！</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>图论</category>
      
      <category>高精度</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二篇题解——运输</title>
    <link href="/2023/02/16/%E7%AC%AC%E4%BA%8C%E7%AF%87%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E8%BF%90%E8%BE%93/"/>
    <url>/2023/02/16/%E7%AC%AC%E4%BA%8C%E7%AF%87%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E8%BF%90%E8%BE%93/</url>
    
    <content type="html"><![CDATA[<p><del>这真的是优先队列的水题</del></p><h1 id="运输"><a href="#运输" class="headerlink" title="运输"></a>运输</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>现在已知 $N$ 件商品，和搬运它们其中每一件的费用。现在搬家公司老板 Mr.sb 决定让我们每次任意选取 $2$ 件商品。然后这 $2$ 件商品只算一件商品的费用。但是这个商品的搬运费用是将选出的 $2$ 个商品的费用之和除以 $k$ 的运算结果。如此反复。直到只收一件商品的钱。这个就是商店要付的费用。掌柜的想尽可能的少付钱，以便将更多的钱捐给希望工程。所以请你帮他计算一下最少只用付多少钱。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数 $n,k$。</p><p>第二行 $n$ 个整数 $w_1,w_2,\ldots,w_n$，表示每一件物品搬运费。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行一个整数表示最少付多少钱。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>$n,k,w_i$ 均为非负数。</p><p>$n,k\le 10^4$。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>其实，根据样例，<del>试一试便可知道</del>这道题的<strong>精髓</strong>：每次将当前最大的两个数合并，再放入其中，直至只剩一个元素——其实就是堆的思想，那么这道题便就可以用优先队列来解决了。</p><p><del>that’s why这是道水题</del></p><p>输入：减少循环的次数，可以边输入边将其加入我们的大根堆。</p><p><img src="1.png" alt="输入"></p><p>处理：每次去除队首的两个元素，将他们相加再$\div k $，将得到的结果重新加入队列，再重复执行。</p><p>至于次数，emm…，$while(q.size&gt;1)$即可。</p><p>so，这道题真的是巩固优先队列的<del>水题</del>。</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k,v[<span class="hljs-number">10005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,less&lt;<span class="hljs-type">int</span>&gt; &gt; q;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;v[i]);<br>q.<span class="hljs-built_in">push</span>(v[i]);<br>&#125;<br><span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-type">int</span> x = q.<span class="hljs-built_in">top</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">int</span> y = q.<span class="hljs-built_in">top</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">int</span> z = (x+y)/k;<br>q.<span class="hljs-built_in">push</span>(z);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,q.<span class="hljs-built_in">top</span>());<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>@全国信竞生 大家<strong><em>加油加油再加油</em></strong>！！！</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>优先队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇题解——青铜莲花池</title>
    <link href="/2023/02/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E9%9D%92%E9%93%9C%E8%8E%B2%E8%8A%B1%E6%B1%A0/"/>
    <url>/2023/02/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E9%9D%92%E9%93%9C%E8%8E%B2%E8%8A%B1%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<p><del>应该是</del>一道经典的bfs广搜题</p><h1 id="青铜莲花池"><a href="#青铜莲花池" class="headerlink" title="青铜莲花池"></a>青铜莲花池</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>$Farmer John$ 建造了一个美丽的池塘，用于让他的牛们审美和锻炼。这个长方形的池子被分割成了$ M $行和$ N $列 $( 1 \leq M \leq 30 ; 1 \le N \le 30 )$ 正方形格子的 。某些格子上有惊人的坚固的莲花，还有一些岩石，其余的只是美丽，纯净，湛蓝的水。</p><p>贝茜正在练习芭蕾舞，她从一个莲花跳跃到另一个莲花，当前位于一个莲花。她希望在莲花上一个一个的跳，目标是另一个给定莲花。她能跳既不入水，也不到一个岩石上。</p><p>令门外汉惊讶的是，贝茜的每次的跳跃像国际象棋中的骑士一样：横向移动$M1 (1 \leq M1 \leq 30 )$，然后纵向移动$M2 (1 \leq M2 \leq 30 ; M1 \neq M2 )$ ，或纵向移动$M1$，然后横向移动$M2$。贝茜有时可能会有多达8个选择的跳跃。</p><p>给定池塘的布局和贝茜的跳跃格式，请确定贝茜从从她的出发位置，到最终目的地，最小的跳跃次数，贝茜在给出测试数据一定可以跳到目的地。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第 1 行：四个用空格隔开的整数: $M$，$N$，$M1$，$M2$。<br>第 2..$M + 1$ 行：第 $i + 1$ 行 有 $N$ 个整数，表示该位置的状态：$0$ 为水； $1$ 为莲花； $2$ 为岩石； $3$ 为贝茜开始的位置； $4$ 为贝茜要去的目标位置。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>第 1 行：一个整数，从起始点到要去的位置，贝茜最小的跳跃次数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p><del>不难看出</del>这道题应该采用广度优先搜索（bfs），那就以bfs模板（也不完全是）为框架，将这道题不同之处用你<del>聪明</del>的大脑填入“框架”中。（<strong><em>By the way</em></strong>，不习惯于STL中的queue的，可以自己用数组和头尾指针来代替）</p><p>首先，根据题目，贝同学会有8个方向的跳跃，分别由$M1$和$M2$的不同位置及方向决定的。那我们就用最stupid的做法：</p><p><img src="1.png" alt="方向"></p><p>当然，防止RE的悲剧发生，我们要提前将这些坐标判断一下。</p><p><img src="2.png" alt="除杂"></p><p>先讲一下原理：因为这8个方向是一个整体，so我们可以在循环外q.pop()，来保证搜索的点一“一”对应。同时，这8个点层数就+1。为了方便，我们不妨在结构体中直接定义step来简化我们的程序。<del>你也不知道贝同学这8个点是不是都不会掉水里or撞石头上</del></p><p>防止可怜的贝同学迷路（程序死循环），我们需要慷慨地将她走过的<del>坑</del>路做一个记号。鉴于输入时是int格式，所以如果$a_{i,j}$==0，那我们先将其赋值为1，然后加入队列温暖的大家庭。</p><p>当然，在我们的bfs函数的开头，别忘设置队列的初始值哦。</p><p><img src="3.png" alt="输入"></p><p>这道题想明白了，你离bfs最<del>只因</del>基本思路的打通就不远了</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,m1,m2;<br><span class="hljs-type">int</span> a[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>];<br><span class="hljs-type">int</span> x,y;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">point</span>&#123;<br><span class="hljs-type">int</span> xx,yy,step;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>point f1;<br>f1.step=<span class="hljs-number">0</span>;<br>f1.xx = x;<br>f1.yy = y;<br>queue&lt;point&gt; q;<br>q.<span class="hljs-built_in">push</span>(f1);<br><span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">empty</span>()!=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">7</span>;i++)&#123;<br><span class="hljs-type">int</span> ix,iy;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx+m1;<br>iy = q.<span class="hljs-built_in">front</span>().yy+m2;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx+m2;<br>iy = q.<span class="hljs-built_in">front</span>().yy+m1;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">2</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx+m2;<br>iy = q.<span class="hljs-built_in">front</span>().yy-m1;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">3</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx+m1;<br>iy = q.<span class="hljs-built_in">front</span>().yy-m2;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">4</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx-m1;<br>iy = q.<span class="hljs-built_in">front</span>().yy-m2;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">5</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx-m1;<br>iy = q.<span class="hljs-built_in">front</span>().yy+m2;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">6</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx-m2;<br>iy = q.<span class="hljs-built_in">front</span>().yy+m1;<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">7</span>)&#123;<br>ix = q.<span class="hljs-built_in">front</span>().xx-m2;<br>iy = q.<span class="hljs-built_in">front</span>().yy-m1;<br>&#125;<br><span class="hljs-keyword">if</span>(ix&lt;<span class="hljs-number">1</span> || ix&gt;n || iy&lt;<span class="hljs-number">1</span> || iy&gt;m)&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(a[ix][iy]==<span class="hljs-number">4</span>)&#123;<br><span class="hljs-type">int</span> st = q.<span class="hljs-built_in">front</span>().step+<span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,st);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(a[ix][iy]==<span class="hljs-number">1</span>)&#123;<br>a[ix][iy]=<span class="hljs-number">0</span>;<br>point f;<br>f.step = q.<span class="hljs-built_in">front</span>().step+<span class="hljs-number">1</span>;<br>f.xx = ix;<br>f.yy = iy;<br>q.<span class="hljs-built_in">push</span>(f);<br>&#125;<br>&#125;<br>q.<span class="hljs-built_in">pop</span>();<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;m1,&amp;m2);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i][j]);<br><span class="hljs-keyword">if</span>(a[i][j] == <span class="hljs-number">3</span>)&#123;<br>x = i;<br>y = j;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">bfs</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>本篇题解为王某的处女作，希望今后能与全国（世界）信竞生<strong><em>一起努力，一起拼搏，一起收获</em></strong>。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>bfs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2023/02/12/test/"/>
    <url>/2023/02/12/test/</url>
    
    <content type="html"><![CDATA[<p>first day in hexo</p><img src="/2023/02/12/test/test.png" class="">]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/12/hello-world/"/>
    <url>/2023/02/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
